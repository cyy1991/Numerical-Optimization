function result = Gauss_integral3D(lambda, target)
% INPUT: lambda is a column matrix
% directly implement the integral from 0 to 1, given lambda
% use five point Gauss in 3D, in total 125 evaluation point
% reach accuracy of at least 5-6 decimal point

% example: 
% Gauss_integral3D([1,0, 0, 0.2])
% Gauss_integral3D([3,3,0,0.01; 2,2,1,0.4;1,3,1,0.006])
% base function change of variable

global i1_i2_i3_m;

each_term = @(x1, x2, x3, i1, i2, i3, lambda) lambda * x1.^i1 .* x2.^i2 .* x3.^i3; 

% generate zero_node/weights in 3D space

% 100
%w = [0.000734634490505672;0.00170939265351811;0.00268392537155348;0.00365596120132638;0.00462445006342212;0.00558842800386552;0.00654694845084532;0.00749907325546471;0.00844387146966897;0.00938041965369446;0.0103078025748690;0.0112251140231860;0.0121314576629795;0.0130259478929715;0.0139077107037188;0.0147758845274413;0.0156296210775460;0.0164680861761452;0.0172904605683236;0.0180959407221281;0.0188837396133749;0.0196530874944353;0.0204032326462094;0.0211334421125276;0.0218430024162474;0.0225312202563363;0.0231974231852541;0.0238409602659682;0.0244612027079571;0.0250575444815796;0.0256294029102081;0.0261762192395457;0.0266974591835710;0.0271926134465769;0.0276611982207924;0.0281027556591012;0.0285168543223951;0.0289030896011252;0.0292610841106383;0.0295904880599126;0.0298909795933328;0.0301622651051691;0.0304040795264548;0.0306161865839804;0.0307983790311526;0.0309504788504910;0.0310723374275665;0.0311638356962099;0.0312248842548494;0.0312554234538634;0.0312554234538634;0.0312248842548494;0.0311638356962099;0.0310723374275665;0.0309504788504910;0.0307983790311526;0.0306161865839804;0.0304040795264548;0.0301622651051691;0.0298909795933328;0.0295904880599126;0.0292610841106383;0.0289030896011252;0.0285168543223951;0.0281027556591012;0.0276611982207924;0.0271926134465769;0.0266974591835710;0.0261762192395457;0.0256294029102081;0.0250575444815796;0.0244612027079571;0.0238409602659682;0.0231974231852541;0.0225312202563363;0.0218430024162474;0.0211334421125276;0.0204032326462094;0.0196530874944353;0.0188837396133749;0.0180959407221281;0.0172904605683236;0.0164680861761452;0.0156296210775460;0.0147758845274413;0.0139077107037188;0.0130259478929715;0.0121314576629795;0.0112251140231860;0.0103078025748690;0.00938041965369446;0.00844387146966897;0.00749907325546471;0.00654694845084532;0.00558842800386552;0.00462445006342212;0.00365596120132638;0.00268392537155348;0.00170939265351811;0.000734634490505672];
%zero_nodes_base = 0.5 + 0.5.*[-0.999713726773441;-0.998491950639596;-0.996295134733125;-0.993124937037443;-0.988984395242992;-0.983877540706057;-0.977809358486918;-0.970785775763706;-0.962813654255816;-0.953900782925492;-0.944055870136256;-0.933288535043080;-0.921609298145334;-0.909029570982530;-0.895561644970727;-0.881218679385018;-0.866014688497165;-0.849964527879591;-0.833083879888401;-0.815389238339176;-0.796897892390315;-0.777627909649496;-0.757598118519707;-0.736828089802021;-0.715338117573056;-0.693149199355802;-0.670283015603141;-0.646761908514129;-0.622608860203708;-0.597847470247179;-0.572501932621381;-0.546597012065094;-0.520158019881763;-0.493210789208191;-0.465781649773358;-0.437897402172032;-0.409585291678302;-0.380872981624630;-0.351788526372422;-0.322360343900529;-0.292617188038472;-0.262588120371504;-0.232302481844974;-0.201789864095736;-0.171080080538603;-0.140203137236114;-0.109189203580061;-0.0780685828134366;-0.0468716824215916;-0.0156289844215431;0.0156289844215431;0.0468716824215916;0.0780685828134366;0.109189203580061;0.140203137236114;0.171080080538603;0.201789864095736;0.232302481844974;0.262588120371504;0.292617188038472;0.322360343900529;0.351788526372422;0.380872981624630;0.409585291678302;0.437897402172032;0.465781649773358;0.493210789208191;0.520158019881763;0.546597012065094;0.572501932621381;0.597847470247179;0.622608860203708;0.646761908514129;0.670283015603141;0.693149199355802;0.715338117573056;0.736828089802021;0.757598118519707;0.777627909649496;0.796897892390315;0.815389238339176;0.833083879888401;0.849964527879591;0.866014688497165;0.881218679385018;0.895561644970727;0.909029570982530;0.921609298145334;0.933288535043080;0.944055870136256;0.953900782925492;0.962813654255816;0.970785775763706;0.977809358486918;0.983877540706057;0.988984395242992;0.993124937037443;0.996295134733125;0.998491950639596;0.999713726773441];

% 64
w =  [0.0486909570091397,0.0486909570091397,0.0485754674415034,0.0485754674415034,0.0483447622348030,0.0483447622348030,0.0479993885964583,0.0479993885964583,0.0475401657148303,0.0475401657148303,0.0469681828162100,0.0469681828162100,0.0462847965813144,0.0462847965813144,0.0454916279274181,0.0454916279274181,0.0445905581637566,0.0445905581637566,0.0435837245293235,0.0435837245293235,0.0424735151236536,0.0424735151236536,0.0412625632426235,0.0412625632426235,0.0399537411327203,0.0399537411327203,0.0385501531786156,0.0385501531786156,0.0370551285402400,0.0370551285402400,0.0354722132568824,0.0354722132568824,0.0338051618371416,0.0338051618371416,0.0320579283548516,0.0320579283548516,0.0302346570724025,0.0302346570724025,0.0283396726142595,0.0283396726142595,0.0263774697150547,0.0263774697150547,0.0243527025687109,0.0243527025687109,0.0222701738083833,0.0222701738083833,0.0201348231535302,0.0201348231535302,0.0179517157756973,0.0179517157756973,0.0157260304760247,0.0157260304760247,0.0134630478967186,0.0134630478967186,0.0111681394601311,0.0111681394601311,0.00884675982636390,0.00884675982636390,0.00650445796897840,0.00650445796897840,0.00414703326056250,0.00414703326056250,0.00178328072169640,0.00178328072169640];
zero_nodes_base = 0.5+ 0.5* [-0.0243502926634244,0.0243502926634244,-0.0729931217877990,0.0729931217877990,-0.121462819296120,0.121462819296120,-0.169644420423992,0.169644420423992,-0.217423643740007,0.217423643740007,-0.264687162208767,0.264687162208767,-0.311322871990211,0.311322871990211,-0.357220158337668,0.357220158337668,-0.402270157963991,0.402270157963991,-0.446366017253464,0.446366017253464,-0.489403145707053,0.489403145707053,-0.531279464019894,0.531279464019894,-0.571895646202634,0.571895646202634,-0.611155355172393,0.611155355172393,-0.648965471254657,0.648965471254657,-0.685236313054233,0.685236313054233,-0.719881850171610,0.719881850171610,-0.752819907260531,0.752819907260531,-0.783972358943341,0.783972358943341,-0.813265315122797,0.813265315122797,-0.840629296252580,0.840629296252580,-0.865999398154092,0.865999398154092,-0.889315445995114,0.889315445995114,-0.910522137078502,0.910522137078502,-0.929569172131939,0.929569172131939,-0.946411374858402,0.946411374858402,-0.961008799652053,0.961008799652053,-0.973326827789911,0.973326827789911,-0.983336253884626,0.983336253884626,-0.991013371476744,0.991013371476744,-0.996340116771955,0.996340116771955,-0.999305041735772,0.999305041735772];
n = length(w);
[variable_size, ~] = size(i1_i2_i3_m);
zero_nodes = zeros(n^3, 3);
weights = zeros(1,n^3);

for i=1:n
    for j=1:n
        for k=1:n
            zero_nodes(n^2*(i-1)+n*(j-1)+(k),: ) = zero_nodes_base([ i, j, k]);
            weights(n^2*(i-1)+n*(j-1)+(k) )  = w(i)*w(j)*w(k);
        end
    end
end

m = zero_nodes(:,1);
t = zero_nodes(:,2);
s = zero_nodes(:,3);
x1 = m;
x2 = (1-m).*t;
x3 = (1-m-(1-m).*t).*s;

change_variable_constant = (1-m).*(1-m-(1-m).*t);

f_val = zeros(n^3,1);
for i = 1: variable_size
    f_val = f_val + each_term( x1, x2, x3,  i1_i2_i3_m(i,1), i1_i2_i3_m(i,2), i1_i2_i3_m(i,3), lambda(i) );
end

if target=='f'
    preceding_term = ones(n.^3, 1);
    result = weights * ( exp(f_val) .* change_variable_constant .* preceding_term) /8 ; % final f
    result = result -  i1_i2_i3_m(:,4)' *  lambda;
elseif target=='g'
    g = zeros(variable_size, 1); % final g
    for i=1:variable_size
        preceding_term = prod( power( [x1,x2,x3] , i1_i2_i3_m(i,1:3)), 2);
        g(i) = weights * (exp(f_val) .* change_variable_constant .* preceding_term);
    end
    result = g / 8 -  i1_i2_i3_m(:, 4);
elseif target=='h'
    h = zeros(variable_size, variable_size);
    for i=1:variable_size
        for j=1:variable_size
            preceding_term = prod(power( [x1,x2,x3],  i1_i2_i3_m(i,1:3 )+ i1_i2_i3_m(j,1:3 )),2) ;
            h(i, j)= weights * (exp(f_val) .* change_variable_constant .* preceding_term);
        end
    end
    result = h / 8;
end



end